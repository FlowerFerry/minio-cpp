
SET(UNOFFICIAL_CURLPP_PKG_DIR "" CACHE PATH "Path to unofficial-curlpp library")
SET(UNOFFICIAL_CURLPP_SRC_DIR "" CACHE PATH "Path to unofficial-curlpp source directory")
SET(UNOFFICIAL_CURLPP_INC_DIR "" CACHE PATH "Path to unofficial-curlpp include directory")
SET(UNOFFICIAL_CURLPP_LIB_DIR "" CACHE PATH "Path to unofficial-curlpp library directory")

IF (NOT UNOFFICIAL_CURLPP_SRC_DIR STREQUAL "")
  add_subdirectory(${UNOFFICIAL_CURLPP_SRC_DIR} ${CMAKE_CURRENT_BINARY_DIR}/unofficial-curlpp)
  message(STATUS "Using unofficial-curlpp source from ${UNOFFICIAL_CURLPP_SRC_DIR}")
ELSE()
  IF (NOT UNOFFICIAL_CURLPP_PKG_DIR STREQUAL "")
    find_package(unofficial-curlpp CONFIG PATHS ${UNOFFICIAL_CURLPP_PKG_DIR})
  ELSE()
    find_package(unofficial-curlpp CONFIG)
  ENDIF()
  
  IF (unofficial-curlpp_FOUND)
    message(STATUS "Using unofficial-curlpp from ${unofficial-curlpp_DIR}")
  ELSEIF (NOT UNOFFICIAL_CURLPP_INC_DIR STREQUAL "" AND NOT UNOFFICIAL_CURLPP_LIB_DIR STREQUAL "")
    set(unofficial-curlpp_FOUND TRUE)
    include_directories(${UNOFFICIAL_CURLPP_INC_DIR})
    link_directories(${UNOFFICIAL_CURLPP_LIB_DIR})
    add_library(curlpp STATIC IMPORTED)
    message(STATUS "Using unofficial-curlpp include from ${UNOFFICIAL_CURLPP_INC_DIR}")
    message(STATUS "Using unofficial-curlpp library from ${UNOFFICIAL_CURLPP_LIB_DIR}")
  ENDIF()
ENDIF()

IF (NOT unofficial-curlpp_FOUND)
  message(FATAL_ERROR "unofficial-curlpp not found")
ENDIF()